{"ast":null,"code":"var _jsxFileName = \"E:\\\\User\\\\Desktop\\\\film-chat\\\\film-chat\\\\src\\\\chat\\\\chat-App.js\";\nimport React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\nimport { tokenUrl, instanceLocator } from './config';\n\nclass ChatApp extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      state: true\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: 'User1',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.currentUser = currentUser;\n      this.getRooms();\n    }).catch(err => console.log('error on connecting: ', err));\n  } // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.roomName !== this.props.roomName) {\n      this.createRoom(nextProps.roomName);\n    }\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms().then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      });\n    }).catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    });\n    this.setState({\n      messages: []\n    });\n    console.log(roomId);\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        }\n      }\n    }).then(room => {\n      this.setState({\n        roomId: room.id\n      });\n      this.getRooms();\n    }).catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    let index = false;\n    console.log(this.state.joinedRooms);\n    let index2 = this.state.joinedRooms.forEach(movie => {\n      return name == movie.name ? true : false;\n    });\n    console.log(index);\n    this.currentUser.createRoom({\n      name\n    }).then(room => this.subscribeToRoom(room.id)).catch(err => console.log('error with create room'));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      roomId: this.state.roomId,\n      subscribeToRoom: this.subscribeToRoom,\n      rooms: [...this.state.joinableRooms, ...this.state.joinedRooms],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      roomId: this.state.roomId,\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      disabled: !this.state.roomId,\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(NewRoomForm, {\n      createRoom: this.createRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["E:\\User\\Desktop\\film-chat\\film-chat\\src\\chat\\chat-App.js"],"names":["React","Chatkit","MessageList","SendMessageForm","RoomList","NewRoomForm","tokenUrl","instanceLocator","ChatApp","Component","constructor","state","roomId","messages","joinableRooms","joinedRooms","sendMessage","bind","subscribeToRoom","getRooms","createRoom","componentDidMount","chatManager","ChatManager","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","catch","err","console","log","componentWillReceiveProps","nextProps","roomName","props","getJoinableRooms","setState","rooms","hooks","onMessage","message","room","id","text","name","index","index2","forEach","movie","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\n\nimport { tokenUrl, instanceLocator } from './config'\n\nclass ChatApp extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            roomId: null,\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: [],\n            state: true\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.getRooms = this.getRooms.bind(this)\n        this.createRoom = this.createRoom.bind(this)\n    }\n\n    componentDidMount() {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator,\n            userId: 'User1',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: tokenUrl\n            })\n\n        })\n\n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser\n            this.getRooms()\n        })\n        .catch(err => console.log('error on connecting: ', err))\n    }\n    // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n    componentWillReceiveProps(nextProps){\n      if(nextProps.roomName!==this.props.roomName){\n          this.createRoom(nextProps.roomName)\n      }\n    }\n\n\n\n\n\n\n\n\n\n    getRooms() {\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n\n    subscribeToRoom(roomId) {\n        this.setState({messages:[]})\n        this.setState({ messages: [] })\n        console.log(roomId)\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n                onMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message],\n                    })\n                }\n            }\n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            })\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n\n    sendMessage(text) {\n        this.currentUser.sendMessage({\n            text,\n            roomId: this.state.roomId\n        })\n    }\n\n    createRoom(name){\n          let index = false\n          console.log(this.state.joinedRooms)\n          let index2 = this.state.joinedRooms.forEach((movie) => {\n            return name == movie.name ? true : false\n          })\n          console.log(index)\n          this.currentUser.createRoom({\n            name\n          })\n          .then(room => this.subscribeToRoom(room.id))\n          .catch(err => console.log('error with create room'))\n        }\n\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <RoomList\n                    roomId={this.state.roomId}\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\n                <MessageList\n                roomId={this.state.roomId}\n                messages={this.state.messages} />\n                <SendMessageForm\n                disabled={!this.state.roomId}\n                sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom}/>\n            </div>\n        );\n    }\n}\n\nexport default ChatApp\n"]},"metadata":{},"sourceType":"module"}
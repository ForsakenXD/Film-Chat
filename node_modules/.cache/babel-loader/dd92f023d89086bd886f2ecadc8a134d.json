{"ast":null,"code":"var _jsxFileName = \"E:\\\\User\\\\Desktop\\\\Film-Chat\\\\film-chat\\\\src\\\\chat\\\\chat-App.js\";\nimport React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\nimport Username from './components/username.js';\nimport 'rodal/lib/rodal.css';\n\nclass ChatApp extends React.Component {\n  constructor() {\n    super();\n\n    this.updateText1 = username => {\n      this.setState({\n        username\n      });\n    };\n\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      state: true,\n      show: false,\n      usersWhoAreTyping: []\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this);\n    this.sendTypingEvent = this.sendTypingEvent.bind(this);\n  }\n\n  onUsernameSubmitted(username) {\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    }).then(response => {\n      this.setState({\n        currentUsername: username\n      });\n      chatManager.connect().then(currentUser => {\n        this.currentUser = currentUser;\n        this.getRooms();\n      }).catch(err => console.log('error on connecting: ', err));\n      console.log('success');\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      show: false\n    });\n  }\n\n  handleShow() {\n    this.setState({\n      show: true\n    });\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:8e5347bd-63e5-479a-b75c-ccb9da6fbf49',\n      userId: this.state.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/8e5347bd-63e5-479a-b75c-ccb9da6fbf49/token'\n      })\n    });\n  } // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.roomName !== this.props.roomName) {\n      this.createRoom(nextProps.roomName);\n    }\n  }\n\n  sendTypingEvent() {\n    this.state.currentUser.isTypingIn({\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms().then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      });\n    }).catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    });\n    this.setState({\n      messages: []\n    });\n    console.log(roomId);\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        }\n      }\n    }).then(room => {\n      this.setState({\n        roomId: room.id\n      });\n      this.getRooms();\n    }).catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    let index = false;\n    let id = '';\n    this.state.joinedRooms.forEach(movie => {\n      if (name == movie.name) {\n        index = true;\n        id = movie.id;\n      }\n    });\n    if (!index) //ensures there isn't a chatroom for the same movie\n      this.currentUser.createRoom({\n        name\n      }).then(room => this.subscribeToRoom(room.id)).catch(err => console.log('error with create room'));else //if there is just join it\n      (room => this.subscribeToRoom(id))(err => console.log('error with create room'));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      roomId: this.state.roomId,\n      subscribeToRoom: this.subscribeToRoom,\n      rooms: [...this.state.joinableRooms, ...this.state.joinedRooms],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      roomId: this.state.roomId,\n      messages: this.state.messages,\n      username: this.state.currentUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      disabled: !this.state.roomId,\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(NewRoomForm, {\n      createRoom: this.createRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(Username, {\n      onSubmit: this.onUsernameSubmitted,\n      usernameUpdate: this.updateText1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["E:\\User\\Desktop\\Film-Chat\\film-chat\\src\\chat\\chat-App.js"],"names":["React","Chatkit","MessageList","SendMessageForm","RoomList","NewRoomForm","Username","ChatApp","Component","constructor","updateText1","username","setState","state","roomId","messages","joinableRooms","joinedRooms","show","usersWhoAreTyping","sendMessage","bind","subscribeToRoom","getRooms","createRoom","handleShow","handleClose","onUsernameSubmitted","sendTypingEvent","fetch","method","headers","body","JSON","stringify","then","response","currentUsername","chatManager","connect","currentUser","catch","err","console","log","error","componentDidMount","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","componentWillReceiveProps","nextProps","roomName","props","isTypingIn","currentRoom","id","getJoinableRooms","rooms","hooks","onMessage","message","room","text","name","index","forEach","movie","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\nimport Username from './components/username.js'\n\n\n\n\n\nimport 'rodal/lib/rodal.css';\n\nclass ChatApp extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            roomId: null,\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: [],\n            state: true,\n            show:false,\n            usersWhoAreTyping:[]\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.getRooms = this.getRooms.bind(this)\n        this.createRoom = this.createRoom.bind(this)\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this)\n        this.sendTypingEvent = this.sendTypingEvent.bind(this)\n\n    }\n    updateText1 = (username) => {this.setState({ username })}\n\n\n\n    onUsernameSubmitted(username) {\n      fetch('http://localhost:3001/users',{\n        method:'POST',\n        headers:{\n          'Content-type':'application/json'\n        },\n        body:JSON.stringify({username})\n      })\n        .then(response => {\n          this.setState({\n            currentUsername: username\n          })\n          chatManager.connect()\n          .then(currentUser => {\n              this.currentUser = currentUser\n              this.getRooms()\n\n          })\n          .catch(err => console.log('error on connecting: ', err))\n        console.log('success')\n      })\n        .catch(error => {\n        console.log(error)\n      })\n\n    }\n\n    handleClose() {\n  this.setState({ show: false });\n}\n\nhandleShow() {\n  this.setState({ show: true });\n}\n\n    componentDidMount() {\n      const chatManager = new Chatkit.ChatManager({\n          instanceLocator:'v1:us1:8e5347bd-63e5-479a-b75c-ccb9da6fbf49',\n          userId: this.state.currentUsername,\n          tokenProvider: new Chatkit.TokenProvider({\n              url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/8e5347bd-63e5-479a-b75c-ccb9da6fbf49/token',\n          }),\n\n      })\n\n\n    }\n    // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n    componentWillReceiveProps(nextProps){\n      if(nextProps.roomName!==this.props.roomName){\n          this.createRoom(nextProps.roomName)\n\n      }\n    }\n\n\n\n\n\n    sendTypingEvent() {\n      this.state.currentUser\n        .isTypingIn({ roomId: this.state.currentRoom.id })\n        .catch(error => console.error('error', error))\n  }\n\n\n\n    getRooms() {\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n\n    subscribeToRoom(roomId) {\n        this.setState({messages:[]})\n        this.setState({ messages: [] })\n        console.log(roomId)\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n                onMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message],\n                    })\n                },\n\n            },\n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            })\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n\n    sendMessage(text) {\n        this.currentUser.sendMessage({\n            text,\n            roomId: this.state.roomId\n        })\n    }\n\n    createRoom(name){\n            let index = false\n            let id = ''\n            this.state.joinedRooms.forEach((movie) => {\n            if(name == movie.name)\n              {\n              index = true\n              id = movie.id\n              }\n          })\n          if(!index)  //ensures there isn't a chatroom for the same movie\n            this.currentUser.createRoom({\n              name\n            })\n            .then(room => this.subscribeToRoom(room.id))\n            .catch(err => console.log('error with create room'))\n          else      //if there is just join it\n            (room => this.subscribeToRoom(id))\n            (err => console.log('error with create room'))\n        }\n\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <RoomList\n                    roomId={this.state.roomId}\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\n                <MessageList\n                roomId={this.state.roomId}\n                messages={this.state.messages}\n                username={this.state.currentUsername}\n                />\n                <SendMessageForm\n                disabled={!this.state.roomId}\n                sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom}/>\n                <Username onSubmit={this.onUsernameSubmitted} usernameUpdate={this.updateText1}/>\n            </div>\n        );\n    }\n}\n\nexport default ChatApp\n"]},"metadata":{},"sourceType":"module"}
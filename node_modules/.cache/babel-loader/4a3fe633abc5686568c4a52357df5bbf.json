{"ast":null,"code":"var _jsxFileName = \"E:\\\\User\\\\Desktop\\\\Film-Chat\\\\film-chat\\\\src\\\\chat\\\\chat-App.js\";\nimport React from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport RoomList from './components/RoomList';\nimport NewRoomForm from './components/NewRoomForm';\nimport Username from './components/username.js';\nimport { tokenUrl, instanceLocator } from './config';\nimport 'rodal/lib/rodal.css';\n\nclass ChatApp extends React.Component {\n  constructor() {\n    super();\n\n    this.updateText1 = username => {\n      this.setState({\n        username\n      });\n    };\n\n    this.state = {\n      roomId: null,\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      state: true,\n      show: false\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this);\n  }\n\n  onUsernameSubmitted(username) {\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    }).then(response => {\n      console.log('success');\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      show: false\n    });\n  }\n\n  handleShow() {\n    this.setState({\n      show: true\n    });\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: 'User1',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: tokenUrl\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.currentUser = currentUser;\n      this.getRooms();\n    }).catch(err => console.log('error on connecting: ', err));\n  } // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.roomName !== this.props.roomName) {\n      this.createRoom(nextProps.roomName);\n    }\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms().then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      });\n    }).catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    });\n    this.setState({\n      messages: []\n    });\n    console.log(roomId);\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        }\n      }\n    }).then(room => {\n      this.setState({\n        roomId: room.id\n      });\n      this.getRooms();\n    }).catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    let index = false;\n    let id = '';\n    this.state.joinedRooms.forEach(movie => {\n      if (name == movie.name) {\n        index = true;\n        id = movie.id;\n      }\n    });\n    if (!index) //ensures there isn't a chatroom for the same movie\n      this.currentUser.createRoom({\n        name\n      }).then(room => this.subscribeToRoom(room.id)).catch(err => console.log('error with create room'));else //if there is just join it\n      (room => this.subscribeToRoom(id))(err => console.log('error with create room'));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      roomId: this.state.roomId,\n      subscribeToRoom: this.subscribeToRoom,\n      rooms: [...this.state.joinableRooms, ...this.state.joinedRooms],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      roomId: this.state.roomId,\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      disabled: !this.state.roomId,\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(NewRoomForm, {\n      createRoom: this.createRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Username, {\n      onSubmit: this.updateText1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["E:\\User\\Desktop\\Film-Chat\\film-chat\\src\\chat\\chat-App.js"],"names":["React","Chatkit","MessageList","SendMessageForm","RoomList","NewRoomForm","Username","tokenUrl","instanceLocator","ChatApp","Component","constructor","updateText1","username","setState","state","roomId","messages","joinableRooms","joinedRooms","show","sendMessage","bind","subscribeToRoom","getRooms","createRoom","handleShow","handleClose","onUsernameSubmitted","fetch","method","headers","body","JSON","stringify","then","response","console","log","catch","error","componentDidMount","chatManager","ChatManager","userId","tokenProvider","TokenProvider","url","connect","currentUser","err","componentWillReceiveProps","nextProps","roomName","props","getJoinableRooms","rooms","hooks","onMessage","message","room","id","text","name","index","forEach","movie","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Chatkit from '@pusher/chatkit-client'\n\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\nimport RoomList from './components/RoomList'\nimport NewRoomForm from './components/NewRoomForm'\nimport Username from './components/username.js'\n\nimport { tokenUrl, instanceLocator } from './config'\n\n\nimport 'rodal/lib/rodal.css';\n\nclass ChatApp extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            roomId: null,\n            messages: [],\n            joinableRooms: [],\n            joinedRooms: [],\n            state: true,\n            show:false,\n\n        }\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.getRooms = this.getRooms.bind(this)\n        this.createRoom = this.createRoom.bind(this)\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this)\n    }\n    updateText1 = (username) => {this.setState({ username })}\n\n\n\n    onUsernameSubmitted(username) {\n      fetch('http://localhost:3001/users',{\n        method:'POST',\n        headers:{\n          'Content-type':'application/json'\n        },\n        body:JSON.stringify({username})\n      })\n        .then(response => {\n        console.log('success')\n      })\n        .catch(error => {\n        console.log(error)\n      })\n    }\n\n    handleClose() {\n  this.setState({ show: false });\n}\n\nhandleShow() {\n  this.setState({ show: true });\n}\n\n    componentDidMount() {\n        const chatManager = new Chatkit.ChatManager({\n            instanceLocator,\n            userId:'User1',\n            tokenProvider: new Chatkit.TokenProvider({\n                url: tokenUrl\n            })\n\n        })\n\n        chatManager.connect()\n        .then(currentUser => {\n            this.currentUser = currentUser\n            this.getRooms()\n        })\n        .catch(err => console.log('error on connecting: ', err))\n    }\n    // when a user clikcs to chat for a certain movie this component lifecycle method gets called\n    componentWillReceiveProps(nextProps){\n      if(nextProps.roomName!==this.props.roomName){\n          this.createRoom(nextProps.roomName)\n      }\n    }\n\n\n\n\n\n\n\n\n\n    getRooms() {\n        this.currentUser.getJoinableRooms()\n        .then(joinableRooms => {\n\n            this.setState({\n                joinableRooms,\n                joinedRooms: this.currentUser.rooms\n            })\n        })\n        .catch(err => console.log('error on joinableRooms: ', err))\n    }\n\n    subscribeToRoom(roomId) {\n        this.setState({messages:[]})\n        this.setState({ messages: [] })\n        console.log(roomId)\n        this.currentUser.subscribeToRoom({\n            roomId: roomId,\n            hooks: {\n                onMessage: message => {\n                    this.setState({\n                        messages: [...this.state.messages, message],\n                    })\n                }\n            }\n        })\n        .then(room => {\n            this.setState({\n                roomId: room.id\n            })\n            this.getRooms()\n        })\n        .catch(err => console.log('error on subscribing to room: ', err))\n    }\n\n    sendMessage(text) {\n        this.currentUser.sendMessage({\n            text,\n            roomId: this.state.roomId\n        })\n    }\n\n    createRoom(name){\n            let index = false\n            let id = ''\n            this.state.joinedRooms.forEach((movie) => {\n            if(name == movie.name)\n              {\n              index = true\n              id = movie.id\n              }\n          })\n          if(!index)  //ensures there isn't a chatroom for the same movie\n            this.currentUser.createRoom({\n              name\n            })\n            .then(room => this.subscribeToRoom(room.id))\n            .catch(err => console.log('error with create room'))\n          else      //if there is just join it\n              (room => this.subscribeToRoom(id))\n              (err => console.log('error with create room'))\n        }\n\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <RoomList\n                    roomId={this.state.roomId}\n                    subscribeToRoom={this.subscribeToRoom}\n                    rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]} />\n                <MessageList\n                roomId={this.state.roomId}\n                messages={this.state.messages} />\n                <SendMessageForm\n                disabled={!this.state.roomId}\n                sendMessage={this.sendMessage} />\n                <NewRoomForm createRoom={this.createRoom}/>\n                <Username onSubmit={this.updateText1} />\n            </div>\n        );\n    }\n}\n\nexport default ChatApp\n"]},"metadata":{},"sourceType":"module"}